#!/bin/bash

################################################################################

LOGIN_URL=
TOAST_URL=
REPO_PATH=
REPO_USER=
REPO_PASS=
PHASE=
FLEET=
NAME=
HOST=
PORT=
USER=
INIT=
TOKEN=
SNO=

SHELL_DIR=$(dirname $0)

CONFIG="${HOME}/.toast"

if [ ! -f "${CONFIG}" ]; then
    cp "${SHELL_DIR}/package/toast.txt" ${CONFIG}
    chmod 644 ${CONFIG}
fi

if [ -f "${CONFIG}" ]; then
    . ${CONFIG}
fi

################################################################################

CMD=$1
SUB=$2

ARTIFACT_ID=$3
VERSION=$4
TYPE=$5
DOMAIN=$6

HAS_WAR=FALSE

SUDO=""

if [ "${HOME}" != "/root" ]; then
    SUDO="sudo"
fi

TEMP_DIR="/tmp/deploy"

if [ ! -d "${TEMP_DIR}" ]; then
    mkdir "${TEMP_DIR}"
fi

################################################################################

SITE_DIR="/data/site"
APPS_DIR="/data/apps"

HTTPD_CONF_DIR="/etc/httpd/conf.d"

TOMCAT_VER="8.0.36"
TOMCAT_URL="http://mirror.apache-kr.org/tomcat/tomcat-8/v${TOMCAT_VER}/bin/apache-tomcat-${TOMCAT_VER}.zip"
TOMCAT_DIR="${APPS_DIR}/tomcat8"
WEBAPP_DIR="${TOMCAT_DIR}/webapps"

ORACLE_JDK_RPM="jdk-8u91-linux-x64.rpm"
ORACLE_JDK_URL="http://download.oracle.com/otn-pub/java/jdk/8u91-b14/${ORACLE_JDK_RPM}"

################################################################################

toast() {
    #self_update

    case ${CMD} in
        auto)
            auto
            ;;
        update)
            update
            ;;
        init)
            init
            ;;
        config)
            config
            ;;
        version)
            version
            ;;
        deploy)
            deploy
            ;;
        *)
            usage
    esac

    if [ ! -f "${CONFIG}" ]; then
        config
    fi
}

usage() {
    echo_bar
    echo " Usage: toast {auto|config|update|init|version|deploy}"
    echo_bar
    echo_
    echo " Usage: toast auto"
    echo_
    echo " Usage: toast update"
    echo_
    echo " Usage: toast init"
    echo " Usage: toast init master"
    echo " Usage: toast init slave"
    echo " Usage: toast init web"
    echo " Usage: toast init java"
    echo " Usage: toast init tomcat"
    echo " Usage: toast init mysql"
    echo_
    echo " Usage: toast config"
    echo " Usage: toast config auto"
    echo " Usage: toast config save"
    echo " Usage: toast config health"
    echo " Usage: toast config info"
    echo_
    echo " Usage: toast version"
    echo " Usage: toast version next"
    echo " Usage: toast version save"
    echo_
    echo " Usage: toast deploy"
    echo " Usage: toast deploy auto"
    echo " Usage: toast deploy vhost"
    echo " Usage: toast deploy fleet"
    echo " Usage: toast deploy project"
    echo_
    echo_bar
}

auto() {
    update

    init_default
    init_slave
    init_auto

    config_auto
    config_save
    config_info
    config_cron

    deploy_auto
}

update() {
    self_info
    self_update

    update_yum
}

init() {
    init_default

    if [ "$1" != "" ]; then
        SUB="$1"
    fi

    case ${SUB} in
        master)
            init_master
            ;;
        slave)
            init_slave
            ;;
        web)
            init_php56
            ;;
        java)
            init_java8
            ;;
        tomcat)
            init_java8
            init_tomcat8
            ;;
        mysql)
            init_mysql56
            ;;
        *)
            init_auto
    esac
}

config() {
    if [ "$1" != "" ]; then
        SUB="$1"
    fi

    case ${SUB} in
        auto)
            config_auto
            config_save
            ;;
        save)
            config_save
            ;;
        health)
            config_health
            ;;
        cron)
            config_cron
            ;;
        info|echo|show)
            ;;
        *)
            config_read
            config_save
    esac

    config_info
}

version() {
    version_parse

    case ${SUB} in
        next)
            version_next
            ;;
        save)
            version_save
            ;;
    esac
}

deploy() {
    case ${SUB} in
        vhost)
            deploy_vhost
            ;;
        project)
            deploy_project
            ;;
        server)
            deploy_fleet
            ;;
        jenkins)
            deploy_jenkins
            ;;
        *)
            deploy_auto
    esac
}

################################################################################

self_info() {
    echo_bar

    echo "PATH : $0"
    echo "HOME : ${HOME}"

    echo_bar
}

self_update() {
    pushd "${SHELL_DIR}"
    git pull
    popd
}

login() {
    echo "Please input yanolja id."
    read YAJA_ID
    if [ "${YAJA_ID}" == "" ]; then
        exit 1
    fi

    echo "Please input yanolja password."
    read YAJA_PW
    if [ "${YAJA_PW}" == "" ]; then
        exit 1
    fi

    echo "yanolja login..."

    RES=`curl --data "id=${YAJA_ID}&passwd=${YAJA_PW}" ${LOGIN_URL}`
    ARR=(${RES})

    TOKEN="${ARR[0]}"
}

config_auto() {
    if [ "${NAME}" == "" ]; then
        NAME=`hostname`
    fi

    if [ "${PORT}" == "" ]; then
        PORT=`nmap localhost | grep ssh | awk '{print $1}' | cut -d'/' -f1`
    fi

    if [ "${USER}" == "" ]; then
        USER=`whoami`
    fi
}

config_read() {
    if [ "${TOKEN}" == "" ]; then
        login
    else
        echo "Do you want yanolja login? [yes/no] [default:no]"
        read LOGIN_YN
        if [ "${LOGIN_YN}" == "yes" ]; then
            login
        fi
    fi

    echo "Please input toast url. [default:${TOAST_URL}]"
    read READ_TOAST_URL
    if [ "${READ_TOAST_URL}" != "" ]; then
        TOAST_URL=${READ_TOAST_URL}
    fi

    echo "Please input repository path. [default:${REPO_PATH}]"
    read READ_REPO_PATH
    if [ "${READ_REPO_PATH}" != "" ]; then
        REPO_PATH=${READ_REPO_PATH}
    fi

    echo "Please input server phase. [default:${PHASE}]"
    read READ_PHASE
    if [ "${READ_PHASE}" != "" ]; then
        PHASE=${READ_PHASE}
    fi

    echo "Please input server fleet. [default:${FLEET}]"
    read READ_FLEET
    if [ "${READ_FLEET}" != "" ]; then
        FLEET=${READ_FLEET}
    fi

    echo "Please input server name. [default:${NAME}]"
    read READ_NAME
    if [ "${READ_NAME}" != "" ]; then
        NAME=${READ_NAME}
    fi

    echo "Please input server host. [default:${HOST}]"
    read READ_HOST
    if [ "${READ_HOST}" != "" ]; then
        HOST=${READ_HOST}
    fi

    echo "Please input server port. [default:${PORT}]"
    read READ_PORT
    if [ "${READ_PORT}" != "" ]; then
        PORT=${READ_PORT}
    fi

    echo "Please input server user. [default:${USER}]"
    read READ_USER
    if [ "${READ_USER}" != "" ]; then
        USER=${READ_USER}
    fi
}

config_info() {
    if [ ! -f "${CONFIG}" ]; then
        echo "Not exist file. [${CONFIG}]"
        exit 1
    fi

    echo_bar
    cat ${CONFIG}
    echo_bar
}

config_save() {
    echo "server save..."

    URL="${TOAST_URL}/server/config"
    RES=`curl --data "token=${TOKEN}&no=${SNO}&phase=${PHASE}&fleet=${FLEET}&name=${NAME}&host=${HOST}&port=${PORT}&user=${USER}" ${URL}`
    ARR=(${RES})

    if [ "${ARR[0]}" != "OK" ]; then
        echo "Server Error. [${RES}]"
        exit 1
    fi

    if [ "${ARR[1]}" != "" ]; then
        SNO="${ARR[1]}"
    fi
    if [ "${ARR[2]}" != "" ]; then
        HOST="${ARR[2]}"
    fi

    echo "# yanolja toast config" > ${CONFIG}
    echo "LOGIN_URL=\"${LOGIN_URL}\"" >> ${CONFIG}
    echo "TOAST_URL=\"${TOAST_URL}\"" >> ${CONFIG}
    echo "REPO_PATH=\"${REPO_PATH}\"" >> ${CONFIG}
    echo "REPO_USER=\"${REPO_USER}\"" >> ${CONFIG}
    echo "REPO_PASS=\"${REPO_PASS}\"" >> ${CONFIG}
    echo "PHASE=\"${PHASE}\"" >> ${CONFIG}
    echo "FLEET=\"${FLEET}\"" >> ${CONFIG}
    echo "NAME=\"${NAME}\"" >> ${CONFIG}
    echo "HOST=\"${HOST}\"" >> ${CONFIG}
    echo "PORT=\"${PORT}\"" >> ${CONFIG}
    echo "USER=\"${USER}\"" >> ${CONFIG}
    echo "INIT=\"${INIT}\"" >> ${CONFIG}
    echo "TOKEN=\"${TOKEN}\"" >> ${CONFIG}
    echo "SNO=${SNO}" >> ${CONFIG}

    echo "${RES}"
}

config_health() {
    if [ "${SNO}" == "" ]; then
        echo "Not configured server. [${SNO}]"
        exit 1
    fi

    echo "server health..."

    URL="${TOAST_URL}/server/health/${SNO}"
    RES=`curl ${URL}`

    echo "${RES}"
}

config_cron() {
    TEMP_FILE="${TEMP_DIR}/toast-cron.tmp.$$"

    #crontab -l > ${TEMP_FILE}

    echo "* * * * * ${SHELL_DIR}/toast config health > /dev/null 2>&1" >> ${TEMP_FILE}

    crontab ${TEMP_FILE}

    echo_bar
    crontab -l
    echo_bar
}

update_yum() {
    ${SUDO} yum update -y
}

init_default() {
    ${SUDO} rm -rf /etc/localtime
    ${SUDO} ln -sf /usr/share/zoneinfo/Asia/Seoul /etc/localtime

    if [ ! -f "/usr/bin/git" ]; then
        ${SUDO} yum install -y git
    fi

    if [ ! -f "/usr/bin/vim" ]; then
        ${SUDO} yum install -y vim
    fi

    if [ ! -f "/usr/bin/nmap" ]; then
        ${SUDO} yum install -y nmap
    fi

    if [ "${SUDO}" != "" ]; then
        sed "s/PHASE/$PHASE/g" "${SHELL_DIR}/package/bashrc.txt" > "${HOME}/.bashrc"
    fi

    ${SUDO} cp -rf "${SHELL_DIR}/package/${PHASE}/hosts.txt" "/etc/hosts"

    make_dir "${HOME}/.ssh"

    make_dir "/data"
    make_dir "/data/logs"
}

init_master() {
    AUTH_KEYS="${HOME}/.ssh/authorized_keys"

    if [ ! -f "${AUTH_KEYS}" ]; then
        cat ${SHELL_DIR}/ssh/id_rsa.pub > ${AUTH_KEYS}
        chmod 700 ${AUTH_KEYS}
    else
        IS_KEY="false"

        while read line
        do
            VAL=(${line})

            if [ "${VAL[2]}" == "toast@yanolja.in" ]; then
                IS_KEY="true"
            fi
        done < ${AUTH_KEYS}

        if [ "${IS_KEY}" == "false" ]; then
            cat ${SHELL_DIR}/ssh/id_rsa.pub >> ${AUTH_KEYS}
        fi
    fi
}

init_slave() {
    ID_RSA="${HOME}/.ssh/id_rsa.pub"

    if [ ! -f "${ID_RSA}" ]; then
        #ssh-keygen -t rsa -C "toast@$yanolja.in"

        cp -rf ${SHELL_DIR}/ssh/id_rsa ${HOME}/.ssh/id_rsa
        cp -rf ${SHELL_DIR}/ssh/id_rsa.pub ${HOME}/.ssh/id_rsa.pub

        chmod 600 ${HOME}/.ssh/id_rsa
        chmod 644 ${HOME}/.ssh/id_rsa.pub
    fi
}

init_auto() {
    ARR=(${INIT})

    for i in "${ARR[@]}"; do
        if [ "$i" == "web" ] || [ "$i" == "php" ]; then
            init_php56
        fi
        if [ "$i" == "java" ] || [ "$i" == "jar" ]; then
            init_java8
        fi
        if [ "$i" == "tomcat" ] || [ "$i" == "war" ]; then
            init_tomcat8
        fi
    done
}

init_php56() {
    ${SUDO} yum install -y httpd24 php56 php56-mysqlnd php56-mcrypt php56-gd php56-mbstring

    init_php_open_tag

    ${SUDO} service httpd restart
    ${SUDO} chkconfig httpd on

    make_dir "${SITE_DIR}"
    make_dir "${SITE_DIR}/files" 777
    make_dir "${SITE_DIR}/upload" 777
}

init_php70() {
    ${SUDO} yum install -y httpd24 php70 php70-mysqlnd php70-mcrypt php70-gd php70-mbstring

    init_php_open_tag

    ${SUDO} service httpd restart
    ${SUDO} chkconfig httpd on

    make_dir "${SITE_DIR}"
    make_dir "${SITE_DIR}/files" 777
    make_dir "${SITE_DIR}/upload" 777
}

init_java8() {
    COOKIE="Cookie: gpw_e24=http%3A%2F%2Fwww.oracle.com%2F; oraclelicense=accept-securebackup-cookie"

    wget --no-cookies --no-check-certificate --header ${COOKIE} ${ORACLE_JDK_URL}

    ${SUDO} yum localinstall -y ${ORACLE_JDK_RPM}

    rm -rf ${ORACLE_JDK_RPM}

    echo_bar
    java -version
    echo_bar

    make_dir "${APPS_DIR}"
}

init_tomcat8() {
    if [ -d "${APPS_DIR}/apache-tomcat-${TOMCAT_VER}" ]; then
        rm -rf "${APPS_DIR}/apache-tomcat-${TOMCAT_VER}"
    fi

    if [ -d "${TOMCAT_DIR}" ]; then
        rm -rf "${TOMCAT_DIR}"
    fi

    wget -q -N -P "${APPS_DIR}" "${TOMCAT_URL}"

    unzip -q "${APPS_DIR}/apache-tomcat-${TOMCAT_VER}.zip" -d "${APPS_DIR}"

    ln -s "${APPS_DIR}/apache-tomcat-${TOMCAT_VER}" "${TOMCAT_DIR}"

    chmod 755 ${TOMCAT_DIR}/bin/*.sh
    rm -rf ${WEBAPP_DIR}/*
}

init_mysql56() {
    ${SUDO} yum install -y mysql55-server

    ${SUDO} service mysqld restart
    ${SUDO} chkconfig mysqld on
}

init_php_open_tag() {
    PHP_INI="/etc/php.ini"

    TEMP_FILE="${TEMP_DIR}/toast-php.tmp.$$"

    TAG1="short_open_tag = Off"
    TAG2="short_open_tag = On"

    sed "s/$TAG1/$TAG2/g" ${PHP_INI} > ${TEMP_FILE}

    ${SUDO} mv ${TEMP_FILE} ${PHP_INI}
}

version_parse() {
    DEST_FILE="./pom.xml"

    if [ ! -f "${DEST_FILE}" ]; then
        echo "Not exist file. [${DEST_FILE}]"
        exit 1
    fi

    ARR_GROUP=($(cat ${DEST_FILE} | grep -oP '(?<=groupId>)[^<]+'))
    ARR_ARTIFACT=($(cat ${DEST_FILE} | grep -oP '(?<=artifactId>)[^<]+'))
    ARR_VERSION=($(cat ${DEST_FILE} | grep -oP '(?<=version>)[^<]+'))

    if [ "${ARR_GROUP[0]}" == "" ]; then
        echo "groupId does not exist. [${ARR_GROUP[0]}]"
        exit 1
    fi
    if [ "${ARR_ARTIFACT[0]}" == "" ]; then
        echo "artifactId does not exist. [${ARR_ARTIFACT[0]}]"
        exit 1
    fi

    echo "groupId=${ARR_GROUP[0]}"
    echo "artifactId=${ARR_ARTIFACT[0]}"
    echo "version=${ARR_VERSION[0]}"

    ARTIFACT_ID=${ARR_ARTIFACT[0]}
    VERSION=${ARR_VERSION[0]}
}

version_next() {
    echo "version get..."

    URL="${TOAST_URL}/version/latest/${ARTIFACT_ID}"
    RES=`curl --data "token=${TOKEN}" ${URL}`
    ARR=(${RES})

    if [ "${ARR[0]}" != "OK" ]; then
        echo "Server Error. [${RES}]"
        exit 1
    fi

    NEXT_VERSION="${ARR[1]}"

    echo "${NEXT_VERSION}"

    VER1="<version>[\.0-9a-zA-Z]\+<\/version>"
    VER2="<version>${NEXT_VERSION}<\/version>"

    TEMP_FILE="${TEMP_DIR}/toast-pom.tmp.$$"

    if [ -f ${DEST_FILE} -a -r ${DEST_FILE} ]; then
        sed "s/$VER1/$VER2/;10q;" ${DEST_FILE} > ${TEMP_FILE}
        sed "1,10d" ${DEST_FILE} >> ${TEMP_FILE}

        mv ${TEMP_FILE} ${DEST_FILE}
    else
        echo "Error - Read Fail : ${DEST_FILE}"
        exit 1
    fi

    VERSION=NEXT_VERSION
}

version_save() {
    echo "version save..."

    #aws s3 sync ~/.m2/repository/com/yanolja/${ARTIFACT_ID}/ s3://repo.yanolja.com/release/com/yanolja/${ARTIFACT_ID}/

    URL="${TOAST_URL}/version/build/${ARTIFACT_ID}/${VERSION}"
    RES=`curl --data "token=${TOKEN}" ${URL}`
    ARR=(${RES})

    if [ "${ARR[0]}" != "OK" ]; then
        echo "Server Error. [${RES}]"
        exit 1
    fi

    echo "${ARR[1]}"
}

version_remove() {
    #aws s3 rm s3://repo.yanolja.com/release/com/yanolja/${ARTIFACT_ID}/${VERSION} --recursive

    rm -rf ~/.m2/repository/com/yanolja/${ARTIFACT_ID}/${VERSION}
}

deploy_auto() {
    ARR=(${INIT})

    for i in "${ARR[@]}"; do
        if [ "$i" == "web" ] || [ "$i" == "php" ]; then
            deploy_vhost
        fi
    done
}

deploy_vhost() {
    if [ ! -d "${HTTPD_CONF_DIR}" ]; then
        echo "Need web server init. [toast init web]"
        exit 1
    fi

    ${SUDO} service httpd stop

    ${SUDO} rm -rf ${HTTPD_CONF_DIR}/localhost*
    ${SUDO} rm -rf ${HTTPD_CONF_DIR}/vhost*

    ${SUDO} cp "${SHELL_DIR}/vhost/localhost.conf" "${HTTPD_CONF_DIR}/"
    ${SUDO} chmod 644 "${HTTPD_CONF_DIR}/localhost.conf"

    TEMP_FILE="${TEMP_DIR}/toast-vhost.tmp.$$"

    TEMPLATE="${SHELL_DIR}/vhost/vhost-temp.conf"

    echo "download vhost..."

    TARGET_FILE="${TEMP_DIR}/${FLEET}"
    ${SUDO} rm -rf "${TARGET_FILE}"

    URL="${TOAST_URL}/target/vhost/${FLEET}"
    wget -q -N -P "${TEMP_DIR}" "${URL}"

    while read line
    do
        TARGET=(${line})

        DOM="${TARGET[0]}"

        make_dir "${SITE_DIR}/${DOM}"

        DEST_FILE="${HTTPD_CONF_DIR}/vhost-${DOM}.conf"

        echo "--> ${DEST_FILE}"

        ${SUDO} cp ${TEMPLATE} ${DEST_FILE}

        sed "s/DOM/$DOM/g" ${DEST_FILE} > ${TEMP_FILE} && ${SUDO} mv ${TEMP_FILE} ${DEST_FILE}

        ${SUDO} chmod 644 "${DEST_FILE}"
    done < ${TARGET_FILE}

    ${SUDO} service httpd start
}

deploy_project() {
    # "deploy project yanolja.deploy 0.0.0 php deploy.yanolja.com"

    PACKAGING="${TYPE}"
    if [ "${PACKAGING}" == "war" ]; then
        DEPLOY_PATH="${WEBAPP_DIR}"
    fi
    if [ "${PACKAGING}" == "jar" ]; then
        DEPLOY_PATH="${APPS_DIR}/${ARTIFACT_ID}"
    fi
    if [ "${PACKAGING}" == "php" ]; then
        PACKAGING="war"
        DEPLOY_PATH="${SITE_DIR}/${DOMAIN}"
    fi

    FILENAME="${ARTIFACT_ID}-${VERSION}.${PACKAGING}"
    FILEPATH="${TEMP_DIR}/${FILENAME}"

    UNZIP_DIR="${TEMP_DIR}/${ARTIFACT_ID}"

    echo "download..."

    download

    tomcat_stop

    echo "placement..."

    placement

    tomcat_start
}

deploy_fleet() {
    # "deploy fleet"

    echo "download target..."

    TARGET_FILE="${TEMP_DIR}/${NAME}"
    ${SUDO} rm -rf "${TARGET_FILE}"

    URL="${TOAST_URL}/target/fleet/${FLEET}"
    wget -q -N -P "${TEMP_DIR}" "${URL}"

    echo "download..."

    while read line
    do
      TARGET=(${line})

      deploy_value

      download
    done < ${TARGET_FILE}

    tomcat_stop

    echo "placement..."

    while read line
    do
      TARGET=(${line})

      deploy_value

      placement
    done < ${TARGET_FILE}

    tomcat_start
}

deploy_value() {
    RANDOM="${TARGET[0]}"
    ARTIFACT_ID="${TARGET[1]}"
    VERSION="${TARGET[2]}"
    TYPE="${TARGET[3]}"
    DOMAIN="${TARGET[4]}"

    PACKAGING="${TYPE}"
    if [ "${PACKAGING}" == "war" ]; then
        DEPLOY_PATH="${WEBAPP_DIR}"
    fi
    if [ "${PACKAGING}" == "jar" ]; then
        DEPLOY_PATH="${APPS_DIR}/${ARTIFACT_ID}"
    fi
    if [ "${PACKAGING}" == "php" ]; then
        PACKAGING="war"
        DEPLOY_PATH="${SITE_DIR}/${DOMAIN}"
    fi

    FILENAME="${ARTIFACT_ID}-${VERSION}.${PACKAGING}"
    FILEPATH="${TEMP_DIR}/${FILENAME}"

    UNZIP_DIR="${TEMP_DIR}/${RANDOM}"
}

deploy_jenkins() {
    # "deploy jenkins"

    ARTIFACT_ID="jenkins"
    VERSION=""
    TYPE="war"

    PACKAGING="${TYPE}"
    DEPLOY_PATH="${WEBAPP_DIR}"

    FILENAME="${ARTIFACT_ID}.${PACKAGING}"
    FILEPATH="${TEMP_DIR}/${FILENAME}"

    HAS_WAR="TRUE"

    echo "download..."

    SOURCE="http://mirrors.jenkins-ci.org/war/latest/jenkins.war"

    wget -q -N -P "${TEMP_DIR}" "${SOURCE}"

    tomcat_stop

    echo "placement..."

    placement

    tomcat_start
}

download() {
    SOURCE="${REPO_PATH}/${ARTIFACT_ID}/${VERSION}/${FILENAME}"

    echo "--> from : ${SOURCE}"
    echo "--> to   : ${TEMP_DIR}/${FILENAME}"

    if [ -d "${FILEPATH}" ] || [ -f "${FILEPATH}" ]; then
        rm -rf "${FILEPATH}"
    fi

    if [ "${REPO_USER}" == "" ] || [ "${REPO_PASS}" == "" ]; then
        wget -q -N -P "${TEMP_DIR}" "${SOURCE}"
    else
        wget -q --user "${REPO_USER}" --password "${REPO_PASS}" -N -P "${TEMP_DIR}" "${SOURCE}"
    fi

    if [ ! -f "${FILEPATH}" ]; then
        echo "deploy file does not exist. [${FILEPATH}]"
        exit 1
    fi

    # war (for tomcat stop/start)
    if [ "${TYPE}" == "war" ]; then
        HAS_WAR="TRUE"
    fi

    # php unzip
    if [ "${TYPE}" == "php" ]; then
        if [ -d "${UNZIP_DIR}" ] || [ -f "${UNZIP_DIR}" ]; then
            rm -rf "${UNZIP_DIR}"
        fi

        if [ -d "${UNZIP_DIR}" ] || [ -f "${UNZIP_DIR}" ]; then
            echo "deploy file can not unzip. [${UNZIP_DIR}]"
            exit 1
        fi

        unzip -q "${FILEPATH}" -d "${UNZIP_DIR}"

        chmod 777 "${UNZIP_DIR}/application/logs"
    fi
}

placement() {
  if [ "${DEPLOY_PATH}" == "" ]; then
      echo "empty deploy path. [${DEPLOY_PATH}]"
      exit 1
  fi

  echo "--> ${DEPLOY_PATH}"

  # php
  if [ "${TYPE}" == "php" ]; then
    rm -rf "${DEPLOY_PATH}.backup"

    if [ -d "${DEPLOY_PATH}" ] || [ -f "${DEPLOY_PATH}" ]; then
        mv "${DEPLOY_PATH}" "${DEPLOY_PATH}.backup"
    fi

    if [ -d "${DEPLOY_PATH}" ] || [ -f "${DEPLOY_PATH}" ]; then
      echo "deploy dir can not copy. [${DEPLOY_PATH}]"
      exit 1
    fi

    mv "${UNZIP_DIR}" "${DEPLOY_PATH}"
  fi

  # war
  if [ "${TYPE}" == "war" ]; then
    DEST_WAR="${DEPLOY_PATH}/${ARTIFACT_ID}.${PACKAGING}"

    rm -rf "${DEPLOY_PATH}/${ARTIFACT_ID}"
    rm -rf "${DEST_WAR}"

    if [ -d "${DEST_WAR}" ] || [ -f "${DEST_WAR}" ]; then
      echo "deploy file can not copy. [${DEST_WAR}]"
      exit 1
    fi

    cp -rf "${FILEPATH}" "${DEST_WAR}"
  fi

  # jar
  if [ "${TYPE}" == "jar" ]; then
    DEST_WAR="${DEPLOY_PATH}/${ARTIFACT_ID}.${PACKAGING}"

    process_stop

    rm -rf "${DEST_WAR}"

    if [ -d "${DEST_WAR}" ] || [ -f "${DEST_WAR}" ]; then
      echo "deploy file can not copy. [${DEST_WAR}]"
      exit 1
    fi

    cp -rf "${FILEPATH}" "${DEST_WAR}"

    process_start
  fi
}

tomcat_stop() {
    if [ "${HAS_WAR}" == "TRUE" ]; then
      echo "tomcat stop..."
      /data/apps/tomcat8/bin/shutdown.sh
    fi
}

tomcat_start() {
    if [ "${HAS_WAR}" == "TRUE" ]; then
      status=`ps -ef | grep catalina | grep java | grep -v grep | wc -l | awk '{print $1}'`
      count=0
      while [ ${status} -ge 1 ]; do
        echo "sleep..."
        sleep 3

        if [ ${count} -ge 5 ]; then
          pid=`ps -ef | grep catalina | grep java | grep -v grep | awk '{print $2}'`
          kill -9 ${pid}
          echo "tomcat (${pid}) was killed."
        fi

        sleep 2
        status=`ps -ef | grep catalina | grep java | grep -v grep | wc -l | awk '{print $1}'`
        count=`expr ${count} + 1`
      done
      echo "tomcat start..."
      /data/apps/tomcat8/bin/startup.sh
    fi
}

process_stop() {
    PID=`ps -ef | grep "[${ARTIFACT_ID:0:1}]""${ARTIFACT_ID:1}" | awk '{print $2}'`
    if [ "${PID}" != "" ]; then
      kill -9 ${PID}
      echo "killed ${PID}"
    fi
}

process_start() {
    java -jar ${DEPLOY_PATH}/${ARTIFACT_ID}.${PACKAGING} >> /dev/null &

    PID=`ps -ef | grep "[${ARTIFACT_ID:0:1}]""${ARTIFACT_ID:1}" | awk '{print $2}'`
    if [ "${PID}" != "" ]; then
      echo "start up ${PID}"
    fi
}

make_dir() {
    if [ ! -d $1 ] && [ ! -f $1 ]; then
        ${SUDO} mkdir $1
    fi

    ${SUDO} chown ${USER}.${USER} $1

    if [ "$2" != "" ]; then
        chmod $2 $1
    fi
}

echo_bar() {
    echo "================================================================================"
}

echo_() {
    echo ""
}

################################################################################

toast

# done
echo "done."

exit $?
