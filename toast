#!/bin/bash

################################################################################

LOGIN_URL=
TOAST_URL=
REPO_PATH=
REPO_USER=
REPO_PASS=
PHASE=
FLEET=
ID=
NAME=
HOST=
PORT=
USER=
TOKEN=
SNO=

SHELL_DIR=$(dirname $0)

CONFIG="${HOME}/.toast"

if [ -f "${CONFIG}" ]; then
    . ${CONFIG}
fi

################################################################################

CMD=$1
SUB=$2

GROUP_ID=$3
ARTIFACT_ID=$4
VERSION=$5
TYPE=$6
DOMAIN=$7

if [ "${USER}" == "" ]; then
    USER=`whoami`
fi

SUDO=""

if [ "${HOME}" != "/root" ]; then
    SUDO="sudo"
fi

TEMP_DIR="/tmp/deploy"

################################################################################

HAS_APACHE="FALSE"
HAS_TOMCAT="FALSE"

SITE_DIR="/data/site"
APPS_DIR="/data/apps"

APACHE_VERSION="24"
HTTPD_CONF_DIR="/etc/httpd/conf.d"

JDK_RPM="jdk-8u91-linux-x64.rpm"
JDK_URL="http://download.oracle.com/otn-pub/java/jdk/8u91-b14/${JDK_RPM}"

TOMCAT_VER="8.0.36"
TOMCAT_URL="http://mirror.apache-kr.org/tomcat/tomcat-8/v${TOMCAT_VER}/bin/apache-tomcat-${TOMCAT_VER}.zip"
TOMCAT_DIR="${APPS_DIR}/tomcat8"
WEBAPP_DIR="${TOMCAT_DIR}/webapps"

################################################################################

toast() {
    case ${CMD} in
        auto)
            auto
            ;;
        update)
            update
            ;;
        config)
            config
            ;;
        health)
            health
            ;;
        init)
            init
            ;;
        terminate)
            terminate
            ;;
        version)
            version
            ;;
        deploy)
            deploy
            ;;
        log)
            log
            ;;
        *)
            usage
    esac

    if [ ! -f "${CONFIG}" ]; then
        auto
    fi
}

usage() {
    echo_toast
    echo " Usage: toast {auto|update|config|init|version|deploy}"
    echo_bar
    echo_
    echo " Usage: toast auto"
    echo_
    echo " Usage: toast update"
    echo_
    echo " Usage: toast config"
    echo " Usage: toast config auto"
    echo " Usage: toast config save"
    echo " Usage: toast config info"
    echo_
    echo " Usage: toast health"
    echo_
    echo " Usage: toast init"
    echo " Usage: toast init master"
    echo " Usage: toast init slave"
    echo " Usage: toast init php5"
    echo " Usage: toast init php7"
    echo " Usage: toast init java"
    echo " Usage: toast init tomcat"
    echo " Usage: toast init mysql"
    echo " Usage: toast init redis"
    echo " Usage: toast init rabbitmq"
    echo_
    echo " Usage: toast terminate"
    echo_
    echo " Usage: toast version"
    echo " Usage: toast version next"
    echo " Usage: toast version save"
    echo_
    echo " Usage: toast deploy"
    echo " Usage: toast deploy auto"
    echo " Usage: toast deploy vhost"
    echo " Usage: toast deploy fleet"
    echo " Usage: toast deploy project"
    echo_
    echo_bar
}

auto() {
    echo_toast

    prepare

    #update

    config_auto
    config_save
    config_info
    config_cron

    init_aws
    init_slave
    init_auto

    deploy_fleet
}

update() {
    self_info
    self_update

    yum_update
}

init() {
    if [ "$1" != "" ]; then
        SUB="$1"
    fi

    case ${SUB} in
        master)
            init_master
            ;;
        slave)
            init_slave
            ;;
        aws)
            init_aws
            ;;
        php5)
            init_apache
            init_php56
            ;;
        php7)
            init_apache
            init_php70
            ;;
        java|tomcat)
            init_java8
            init_tomcat8
            ;;
        mysql)
            init_mysql56
            ;;
        redis)
            init_redis
            ;;
        rabbitmq)
            init_rabbitmq
            ;;
        *)
            init_auto
    esac
}

config() {
    if [ "$1" != "" ]; then
        SUB="$1"
    fi

    case ${SUB} in
        auto)
            config_auto
            config_save
            ;;
        save)
            config_save
            ;;
        cron)
            config_cron
            ;;
        info|echo|show)
            ;;
        *)
            config_read
            config_save
    esac

    config_info
}

version() {
    version_parse

    case ${SUB} in
        next)
            version_next
            ;;
        save)
            version_save
            ;;
    esac
}

deploy() {
    case ${SUB} in
        vhost)
            deploy_vhost
            ;;
        project)
            deploy_project
            ;;
        server)
            deploy_fleet
            ;;
        *)
            deploy_fleet
    esac
}

log() {
    case ${SUB} in
        tomcat)
            log_tomcat
            ;;
        *)
            log_webapp
    esac
}

################################################################################

self_info() {
    echo_bar
    echo "PATH : $0"
    echo "HOME : ${HOME}"
    echo_bar
}

self_update() {
    pushd "${SHELL_DIR}"
    git pull
    popd
}

prepare() {
    ${SUDO} rm -rf /etc/localtime
    ${SUDO} ln -sf /usr/share/zoneinfo/Asia/Seoul /etc/localtime

    yum_install git
    yum_install curl
    yum_install nmap
    yum_install wget
    yum_install unzip

    if [ ! -f "${HOME}/.toast_epel" ]; then
        if [ ! -f "/usr/bin/yum-config-manager" ]; then
            ${SUDO} sudo yum install -y yum-utils
        fi

        ${SUDO} rpm -Uvh https://dl.fedoraproject.org/pub/epel/epel-release-latest-6.noarch.rpm
        ${SUDO} yum-config-manager --enable epel

        touch "${HOME}/.toast_epel"
    fi

    make_dir "${TEMP_DIR}"

    make_dir "${HOME}/.m2"
    make_dir "${HOME}/.ssh"

    ${SUDO} cp -rf "${SHELL_DIR}/package/phase/${PHASE}/hosts.txt" "/etc/hosts"

    if [ "${SUDO}" != "" ]; then
        TARGET_FILE="${HOME}/.toast_alias"
        copy "${SHELL_DIR}/package/phase/${PHASE}/alias.txt" "${TARGET_FILE}" 644

        TARGET_FILE="${HOME}/.bashrc"
        copy "${SHELL_DIR}/package/bashrc.txt" "${TARGET_FILE}" 644

        TEMP_FILE="${TEMP_DIR}/bashrc.tmp.$$"
        sed "s/PHASE/$PHASE/g" ${TARGET_FILE} > ${TEMP_FILE} && mv -f ${TEMP_FILE} ${TARGET_FILE}

        source "${TARGET_FILE}"
    fi

    if [ ! -f "${HOME}/.m2/settings.xml" ]; then
        TARGET_FILE="${HOME}/.m2/settings.xml"
        copy "${SHELL_DIR}/package/m2/settings.xml" "${TARGET_FILE}" 644

        TEMP_FILE="${TEMP_DIR}/settings.tmp.$$"
        sed "s/REPO_USER/$REPO_USER/g" ${TARGET_FILE} > ${TEMP_FILE} && mv -f ${TEMP_FILE} ${TARGET_FILE}
        sed "s/REPO_PASS/$REPO_PASS/g" ${TARGET_FILE} > ${TEMP_FILE} && mv -f ${TEMP_FILE} ${TARGET_FILE}
    fi

    if [ ! -f "${HOME}/.ssh/config" ]; then
        TARGET_FILE="${HOME}/.ssh/config"
        copy "${SHELL_DIR}/package/ssh/config" "${TARGET_FILE}" 600
    fi

    make_dir "/data"
    make_dir "/data/logs"

    if [ ! -f "${CONFIG}" ]; then
        copy "${SHELL_DIR}/package/toast.txt" ${CONFIG} 644
    fi
}

login() {
    echo "Please input yanolja id."
    read YAJA_ID
    if [ "${YAJA_ID}" == "" ]; then
        exit 1
    fi

    echo "Please input yanolja password."
    read YAJA_PW
    if [ "${YAJA_PW}" == "" ]; then
        exit 1
    fi

    echo "yanolja login..."

    RES=`curl -s --data "id=${YAJA_ID}&passwd=${YAJA_PW}" ${LOGIN_URL}`
    ARR=(${RES})

    TOKEN="${ARR[0]}"
}

config_auto() {
    ID=`curl -s http://instance-data/latest/meta-data/instance-id`

    NAME=`hostname`

    PORT=`nmap localhost | grep ssh | awk '{print $1}' | cut -d'/' -f1`
}

config_read() {
    if [ "${TOKEN}" == "" ]; then
        login
    else
        echo "Do you want yanolja login? [yes/no] [default:no]"
        read LOGIN_YN
        if [ "${LOGIN_YN}" == "yes" ]; then
            login
        fi
    fi

    echo "Please input toast url. [default:${TOAST_URL}]"
    read READ_TOAST_URL
    if [ "${READ_TOAST_URL}" != "" ]; then
        TOAST_URL=${READ_TOAST_URL}
    fi

    echo "Please input repository path. [default:${REPO_PATH}]"
    read READ_REPO_PATH
    if [ "${READ_REPO_PATH}" != "" ]; then
        REPO_PATH=${READ_REPO_PATH}
    fi

    echo "Please input server phase. [default:${PHASE}]"
    read READ_PHASE
    if [ "${READ_PHASE}" != "" ]; then
        PHASE=${READ_PHASE}
    fi

    echo "Please input server fleet. [default:${FLEET}]"
    read READ_FLEET
    if [ "${READ_FLEET}" != "" ]; then
        FLEET=${READ_FLEET}
    fi

    echo "Please input server name. [default:${NAME}]"
    read READ_NAME
    if [ "${READ_NAME}" != "" ]; then
        NAME=${READ_NAME}
    fi

    echo "Please input server host. [default:${HOST}]"
    read READ_HOST
    if [ "${READ_HOST}" != "" ]; then
        HOST=${READ_HOST}
    fi

    echo "Please input server port. [default:${PORT}]"
    read READ_PORT
    if [ "${READ_PORT}" != "" ]; then
        PORT=${READ_PORT}
    fi

    echo "Please input server user. [default:${USER}]"
    read READ_USER
    if [ "${READ_USER}" != "" ]; then
        USER=${READ_USER}
    fi
}

config_info() {
    if [ ! -f "${CONFIG}" ]; then
        echo "Not exist file. [${CONFIG}]"
        exit 1
    fi

    echo_bar
    cat ${CONFIG}
    echo_bar
}

config_save() {
    echo "server save..."

    URL="${TOAST_URL}/server/config"
    RES=`curl -s --data "token=${TOKEN}&no=${SNO}&phase=${PHASE}&fleet=${FLEET}&name=${NAME}&host=${HOST}&port=${PORT}&user=${USER}&id=${ID}" ${URL}`
    ARR=(${RES})

    if [ "${ARR[0]}" != "OK" ]; then
        echo "Server Error. [${RES}]"
        exit 1
    fi

    if [ "${ARR[1]}" != "" ]; then
        SNO="${ARR[1]}"
    fi
    if [ "${ARR[2]}" != "" ]; then
        HOST="${ARR[2]}"
    fi

    echo "# yanolja toast config" > ${CONFIG}
    echo "LOGIN_URL=\"${LOGIN_URL}\"" >> ${CONFIG}
    echo "TOAST_URL=\"${TOAST_URL}\"" >> ${CONFIG}
    echo "REPO_PATH=\"${REPO_PATH}\"" >> ${CONFIG}
    echo "REPO_USER=\"${REPO_USER}\"" >> ${CONFIG}
    echo "REPO_PASS=\"${REPO_PASS}\"" >> ${CONFIG}
    echo "PHASE=\"${PHASE}\"" >> ${CONFIG}
    echo "FLEET=\"${FLEET}\"" >> ${CONFIG}
    echo "ID=\"${ID}\"" >> ${CONFIG}
    echo "NAME=\"${NAME}\"" >> ${CONFIG}
    echo "HOST=\"${HOST}\"" >> ${CONFIG}
    echo "PORT=\"${PORT}\"" >> ${CONFIG}
    echo "USER=\"${USER}\"" >> ${CONFIG}
    echo "TOKEN=\"${TOKEN}\"" >> ${CONFIG}
    echo "SNO=${SNO}" >> ${CONFIG}

    chmod 644 ${CONFIG}

    echo "${RES}"
}

config_cron() {
    TEMP_FILE="${TEMP_DIR}/toast-cron.tmp.$$"

    #crontab -l > ${TEMP_FILE}

    echo "* * * * * ${SHELL_DIR}/toast health > /dev/null 2>&1" >> ${TEMP_FILE}

    crontab ${TEMP_FILE}

    echo_bar
    crontab -l
    echo_bar
}

health() {
    if [ "${SNO}" == "" ]; then
        echo "Not configured server. [${SNO}]"
        exit 1
    fi

    echo "server health..."

    URL="${TOAST_URL}/server/health/${SNO}"
    RES=`curl -s ${URL}`

    echo "${RES}"
}

yum_update() {
    ${SUDO} yum update -y
}

yum_install() {
    if [ ! -f "/usr/bin/$1" ]; then
        ${SUDO} yum install -y $1
    fi
}

init_master() {
    ID_RSA="${HOME}/.ssh/id_rsa"

    URL="${TOAST_URL}/config/key/rsa_private_key"
    RES=`curl -s --data "token=${TOKEN}" ${URL}`

    echo "${RES}" > ${ID_RSA}
    chmod 600 ${ID_RSA}
}

init_slave() {
    AUTH_KEYS="${HOME}/.ssh/authorized_keys"

    URL="${TOAST_URL}/config/key/rsa_public_key"
    RES=`curl -s --data "token=${TOKEN}" ${URL}`

    IS_KEY="false"

    if [ ! -f "${AUTH_KEYS}" ]; then
        touch ${AUTH_KEYS}
    else
        while read line
        do
            VAL=(${line})

            if [ "${VAL[2]}" == "toast@yanolja.in" ]; then
                IS_KEY="true"
            fi
        done < ${AUTH_KEYS}
    fi

    if [ "${IS_KEY}" == "false" ]; then
        echo "${RES}" >> ${AUTH_KEYS}
        chmod 600 ${AUTH_KEYS}
    fi
}

init_aws() {
    make_dir "${HOME}/.aws"

    copy ${SHELL_DIR}/package/aws/config.txt ${HOME}/.aws/config 600
    copy ${SHELL_DIR}/package/aws/credentials.txt ${HOME}/.aws/credentials 600

    TEMP_FILE="${TEMP_DIR}/toast-credentials.tmp.$$"
    DEST_FILE="${HOME}/.aws/credentials"

    URL="${TOAST_URL}/config/key/aws_access_key_id"
    RES=`curl -s --data "token=${TOKEN}" ${URL}`
    sed "s/AWS_ACCESS_KEY/$RES/g" ${DEST_FILE} > ${TEMP_FILE} && ${SUDO} mv -f ${TEMP_FILE} ${DEST_FILE}

    URL="${TOAST_URL}/config/key/aws_secret_access_key"
    RES=`curl -s --data "token=${TOKEN}" ${URL}`
    sed "s/AWS_SECRET_KEY/$RES/g" ${DEST_FILE} > ${TEMP_FILE} && ${SUDO} mv -f ${TEMP_FILE} ${DEST_FILE}
}

init_auto() {
    URL="${TOAST_URL}/fleet/apps/${PHASE}/${FLEET}"
    RES=`curl -s --data "token=${TOKEN}" ${URL}`
    ARR=(${RES})

    for i in "${ARR[@]}"; do
        case "$i" in
            http|httpd|apache)
                init_apache
                ;;
            php55)
                init_php55
                ;;
            php5|php56)
                init_php56
                ;;
            php7|php70)
                init_php70
                ;;
            java|java8)
                init_java8
                ;;
            tomcat|tomcat8)
                init_tomcat8
                ;;
            mysql55)
                init_mysql55
                ;;
            mysql|mysql56)
                init_mysql56
                ;;
            redis)
                init_redis
                ;;
            rabbitmq)
                init_rabbitmq
                ;;
        esac
    done

    if [ "${HAS_APACHE}" == "TRUE" ]; then
        deploy_vhost
    fi
}

init_apache() {
    HAS_APACHE="TRUE"

    if [ ! -f "${HOME}/.toast_apache" ]; then
        status=`${SUDO} yum list | grep httpd24 | wc -l | awk '{print $1}'`

        if [ ${status} -ge 1 ]; then
            ${SUDO} yum install -y httpd24
            APACHE_VERSION="24"
        else
            ${SUDO} yum install -y httpd
            APACHE_VERSION="22"
        fi

        ${SUDO} chkconfig httpd on

        touch "${HOME}/.toast_apache"
    fi

    ${SUDO} cp -rf "${SHELL_DIR}/package/health.txt" "/var/www/html/health.html"

    make_dir "${SITE_DIR}"
    make_dir "${SITE_DIR}/files" 777
    make_dir "${SITE_DIR}/upload" 777
}

init_webtatic() {
    if [ ! -f "${HOME}/.toast_webtatic" ]; then
        status=`${SUDO} yum list | grep php56 | wc -l | awk '{print $1}'`

        if [ ${status} -lt 1 ]; then
            ${SUDO} rpm -Uvh https://mirror.webtatic.com/yum/el6/latest.rpm

            touch "${HOME}/.toast_webtatic"
        fi
    fi
}

init_php55() {
    init_webtatic

    if [ ! -f "${HOME}/.toast_php55" ]; then
        status=`${SUDO} yum list | grep php55w | wc -l | awk '{print $1}'`

        if [ ${status} -ge 1 ]; then
            ${SUDO} yum install -y php55w php55w-mysqlnd php55w-mcrypt php55w-gd php55w-mbstring
        else
            ${SUDO} yum install -y php55 php55-mysqlnd php55-mcrypt php55-gd php55-mbstring
        fi

        touch "${HOME}/.toast_php55"
    fi

    init_php_ini
}

init_php56() {
    init_webtatic

    if [ ! -f "${HOME}/.toast_php56" ]; then
        status=`${SUDO} yum list | grep php56w | wc -l | awk '{print $1}'`

        if [ ${status} -ge 1 ]; then
            ${SUDO} yum install -y php56w php56w-mysqlnd php56w-mcrypt php56w-gd php56w-mbstring
        else
            ${SUDO} yum install -y php56 php56-mysqlnd php56-mcrypt php56-gd php56-mbstring
        fi

        touch "${HOME}/.toast_php56"
    fi

    init_php_ini
}

init_php70() {
    init_webtatic

    if [ ! -f "${HOME}/.toast_php70" ]; then
        status=`${SUDO} yum list | grep php70w | wc -l | awk '{print $1}'`

        if [ ${status} -ge 1 ]; then
            ${SUDO} yum install -y php70w php70w-mysqlnd php70w-mcrypt php70w-gd php70w-mbstring
        else
            ${SUDO} yum install -y php70 php70-mysqlnd php70-mcrypt php70-gd php70-mbstring
        fi

        touch "${HOME}/.toast_php70"
    fi

    init_php_ini
}

init_java8() {
    if [ ! -f "${HOME}/.toast_java8" ]; then
        echo "download ${JDK_RPM}..."

        COOKIE="Cookie: gpw_e24=http%3A%2F%2Fwww.oracle.com%2F; oraclelicense=accept-securebackup-cookie"

        wget -q --no-cookies --no-check-certificate --header "${COOKIE}" ${JDK_URL}

        ${SUDO} yum localinstall -y ${JDK_RPM}
        ${SUDO} rm -rf ${JDK_RPM}

        JAVA_PATH=$(dirname $(dirname $(readlink -f $(which java))))

        BASH_PROFILE="${HOME}/.bash_profile"

        touch "${BASH_PROFILE}"
        echo "export JAVA_HOME=\"${JAVA_PATH}\"" >> "${BASH_PROFILE}"
        echo "export CATALINA_OPTS=\"-Dproject.profile=${PHASE}\"" >> "${BASH_PROFILE}"
        source "${BASH_PROFILE}"

        echo "JAVA_HOME=${JAVA_PATH}"

        ${SUDO} cp -rf "${SHELL_DIR}/package/jce8/local_policy.jar.bin" "${JAVA_PATH}/lib/security/local_policy.jar"
        ${SUDO} cp -rf "${SHELL_DIR}/package/jce8/US_export_policy.jar.bin" "${JAVA_PATH}/lib/security/US_export_policy.jar"

        touch "${HOME}/.toast_java8"
    fi

    make_dir "${APPS_DIR}"

    echo_bar
    java -version
    echo_bar
}

init_tomcat8() {
    if [ -f "${TOMCAT_DIR}" ] || [ -d "${TOMCAT_DIR}" ]; then
        rm -rf "${TOMCAT_DIR}"
    fi

    if [ -d "${APPS_DIR}/apache-tomcat-${TOMCAT_VER}" ]; then
        rm -rf "${APPS_DIR}/apache-tomcat-${TOMCAT_VER}"
    fi

    TOMCAT_FILE="apache-tomcat-${TOMCAT_VER}.zip"

    if [ ! -f "${APPS_DIR}/${TOMCAT_FILE}" ]; then
        echo "download ${TOMCAT_FILE}..."

        wget -q -N -P "${APPS_DIR}" "${TOMCAT_URL}"
    fi

    unzip -q "${APPS_DIR}/${TOMCAT_FILE}" -d "${APPS_DIR}"

    ln -s "${APPS_DIR}/apache-tomcat-${TOMCAT_VER}" "${TOMCAT_DIR}"

    chmod 755 ${TOMCAT_DIR}/bin/*.sh

    rm -rf ${WEBAPP_DIR}/*
}

init_mysql55() {
    ${SUDO} yum install -y mysql55-server

    ${SUDO} chkconfig mysqld on
}

init_mysql56() {
    ${SUDO} yum install -y mysql56-server

    ${SUDO} chkconfig mysqld on
}

init_redis() {
    ${SUDO} yum install -y redis

    ${SUDO} chkconfig redis on

    ${SUDO} service redis restart
}

init_rabbitmq() {
    #wget -q -N -P "${HOME}" https://www.rabbitmq.com/releases/rabbitmq-server/v3.6.3/rabbitmq-server-3.6.3-1.noarch.rpm

    ${SUDO} yum install -y rabbitmq-server

    ${SUDO} chkconfig rabbitmq-server on

    ${SUDO} service rabbitmq-server restart
}

init_puppet() {
    ${SUDO} yum install -y puppet
}

init_php_ini() {
    PHP_INI="/etc/php.ini"

    TEMP_FILE="${TEMP_DIR}/toast-php.tmp.$$"

    # short_open_tag = On
    sed "s/short\_open\_tag\ \=\ Off/short\_open\_tag\ \=\ On/g" ${PHP_INI} > ${TEMP_FILE} && ${SUDO} mv -f ${TEMP_FILE} ${PHP_INI}

    # date.timezone = Asia/Seoul
    sed "s/\;date\.timezone\ \=/date\.timezone\ \=\ Asia\/Seoul/g" ${PHP_INI} > ${TEMP_FILE} && ${SUDO} mv -f ${TEMP_FILE} ${PHP_INI}
}

terminate() {
    if [ "${ID}" == "" ]; then
        echo "instance-id does not exist."
        exit 1
    fi

    aws ec2 terminate-instances --instance-ids ${ID} --region ap-northeast-2
}

version_parse() {
    DEST_FILE="./pom.xml"

    if [ ! -f "${DEST_FILE}" ]; then
        echo "Not exist file. [${DEST_FILE}]"
        exit 1
    fi

    ARR_GROUP=($(cat ${DEST_FILE} | grep -oP '(?<=groupId>)[^<]+'))
    ARR_ARTIFACT=($(cat ${DEST_FILE} | grep -oP '(?<=artifactId>)[^<]+'))
    ARR_VERSION=($(cat ${DEST_FILE} | grep -oP '(?<=version>)[^<]+'))

    if [ "${ARR_GROUP[0]}" == "" ]; then
        echo "groupId does not exist. [${ARR_GROUP[0]}]"
        exit 1
    fi
    if [ "${ARR_ARTIFACT[0]}" == "" ]; then
        echo "artifactId does not exist. [${ARR_ARTIFACT[0]}]"
        exit 1
    fi

    echo "groupId=${ARR_GROUP[0]}"
    echo "artifactId=${ARR_ARTIFACT[0]}"
    echo "version=${ARR_VERSION[0]}"

    GROUP_ID=${ARR_GROUP[0]}
    ARTIFACT_ID=${ARR_ARTIFACT[0]}
    VERSION=${ARR_VERSION[0]}

    GROUP_PATH=`echo "${GROUP_ID}" | sed "s/\./\//"`
}

version_next() {
    echo "version get..."

    URL="${TOAST_URL}/version/latest/${ARTIFACT_ID}"
    RES=`curl -s --data "token=${TOKEN}" ${URL}`
    ARR=(${RES})

    if [ "${ARR[0]}" != "OK" ]; then
        echo "Server Error. [${RES}]"
        exit 1
    fi

    NEXT_VERSION="${ARR[1]}"

    echo "${NEXT_VERSION}"

    VER1="<version>[\.0-9a-zA-Z]\+<\/version>"
    VER2="<version>${NEXT_VERSION}<\/version>"

    TEMP_FILE="${TEMP_DIR}/toast-pom.tmp.$$"

    if [ -f ${DEST_FILE} -a -r ${DEST_FILE} ]; then
        sed "s/$VER1/$VER2/;10q;" ${DEST_FILE} > ${TEMP_FILE}
        sed "1,10d" ${DEST_FILE} >> ${TEMP_FILE}

        mv -f ${TEMP_FILE} ${DEST_FILE}
    else
        echo "Error - Read Fail : ${DEST_FILE}"
        exit 1
    fi

    VERSION=NEXT_VERSION
}

version_save() {
    echo "version save..."

    if [ "${REPO_USER}" == "s3" ]; then
        aws s3 sync ~/.m2/repository/${GROUP_PATH}/${ARTIFACT_ID}/ ${REPO_PATH}/${GROUP_PATH}/${ARTIFACT_ID}/
    fi

    URL="${TOAST_URL}/version/build/${ARTIFACT_ID}/${VERSION}"
    RES=`curl -s --data "token=${TOKEN}" ${URL}`
    ARR=(${RES})

    if [ "${ARR[0]}" != "OK" ]; then
        echo "Server Error. [${RES}]"
        exit 1
    fi

    echo "${ARR[1]}"
}

version_remove() {
    echo "version remove..."

    GROUP_PATH=`echo "${GROUP_ID}" | sed "s/\./\//"`

    if [ "${REPO_USER}" == "s3" ]; then
        aws s3 rm ${REPO_PATH}/${GROUP_PATH}/${ARTIFACT_ID}/${VERSION} --recursive
    fi

    rm -rf ~/.m2/repository/${GROUP_PATH}/${ARTIFACT_ID}/${VERSION}
}

deploy_vhost() {
    if [ ! -d "${HTTPD_CONF_DIR}" ]; then
        echo "Need web server init. [toast init httpd]"
        exit 1
    fi

    echo "download vhost..."

    TARGET_FILE="${TEMP_DIR}/${FLEET}"

    URL="${TOAST_URL}/target/vhost/${PHASE}/${FLEET}"
    wget -q -N -P "${TEMP_DIR}" "${URL}"

    echo "placement vhost..."

    ${SUDO} service httpd stop

    ${SUDO} rm -rf ${HTTPD_CONF_DIR}/localhost*
    ${SUDO} rm -rf ${HTTPD_CONF_DIR}/toast*

    DEST_FILE="${HTTPD_CONF_DIR}/localhost.conf"
    ${SUDO} cp -rf "${SHELL_DIR}/package/vhost/${APACHE_VERSION}/localhost.conf" "${DEST_FILE}"
    ${SUDO} chmod 644 "${DEST_FILE}"

    TEMPLATE="${SHELL_DIR}/package/vhost/${APACHE_VERSION}/vhost.conf"

    TEMP_FILE="${TEMP_DIR}/toast-vhost.tmp.$$"

    while read line
    do
        TARGET=(${line})

        DOM="${TARGET[0]}"

        make_dir "${SITE_DIR}/${DOM}"

        DEST_FILE="${HTTPD_CONF_DIR}/toast-${DOM}.conf"

        echo "--> ${DEST_FILE}"

        sed "s/DOM/$DOM/g" ${TEMPLATE} > ${TEMP_FILE} && ${SUDO} mv -f ${TEMP_FILE} ${DEST_FILE}
    done < ${TARGET_FILE}

    ${SUDO} service httpd start
}

deploy_project() {
    # "deploy project com.yanolja yanolja.deploy 0.0.0 php deploy.yanolja.com"

    GROUP_PATH=`echo "${GROUP_ID}" | sed "s/\./\//"`

    PACKAGING="${TYPE}"
    if [ "${PACKAGING}" == "war" ]; then
        DEPLOY_PATH="${WEBAPP_DIR}"
    fi
    if [ "${PACKAGING}" == "jar" ]; then
        DEPLOY_PATH="${APPS_DIR}"
    fi
    if [ "${PACKAGING}" == "php" ]; then
        PACKAGING="war"
        DEPLOY_PATH="${SITE_DIR}/${DOMAIN}"
    fi

    FILENAME="${ARTIFACT_ID}-${VERSION}.${PACKAGING}"
    FILEPATH="${TEMP_DIR}/${FILENAME}"

    UNZIP_DIR="${TEMP_DIR}/${ARTIFACT_ID}"

    echo "download..."

    download

    tomcat_stop

    echo "placement..."

    placement

    tomcat_start
}

deploy_fleet() {
    # "deploy fleet"

    echo "download target..."

    TARGET_FILE="${TEMP_DIR}/${FLEET}"
    ${SUDO} rm -rf "${TARGET_FILE}"

    URL="${TOAST_URL}/target/fleet/${PHASE}/${FLEET}"
    wget -q -N -P "${TEMP_DIR}" "${URL}"

    echo "download..."

    while read line
    do
      TARGET=(${line})

      deploy_value

      download
    done < ${TARGET_FILE}

    tomcat_stop

    echo "placement..."

    while read line
    do
      TARGET=(${line})

      deploy_value

      placement
    done < ${TARGET_FILE}

    tomcat_start
}

deploy_value() {
    RANDOM="${TARGET[0]}"
    GROUP_ID="${TARGET[1]}"
    ARTIFACT_ID="${TARGET[2]}"
    VERSION="${TARGET[3]}"
    TYPE="${TARGET[4]}"
    DOMAIN="${TARGET[5]}"

    GROUP_PATH=`echo "${GROUP_ID}" | sed "s/\./\//"`

    PACKAGING="${TYPE}"
    if [ "${PACKAGING}" == "war" ]; then
        DEPLOY_PATH="${WEBAPP_DIR}"
    fi
    if [ "${PACKAGING}" == "jar" ]; then
        DEPLOY_PATH="${APPS_DIR}"
    fi
    if [ "${PACKAGING}" == "php" ]; then
        PACKAGING="war"
        DEPLOY_PATH="${SITE_DIR}/${DOMAIN}"
    fi

    FILENAME="${ARTIFACT_ID}-${VERSION}.${PACKAGING}"
    FILEPATH="${TEMP_DIR}/${FILENAME}"

    UNZIP_DIR="${TEMP_DIR}/${RANDOM}"
}

log_tomcat() {
    tail -f -n 500 "${TOMCAT_DIR}/logs/catalina.out"
}

log_webapp() {
    TODAY=`date +%Y-%m-%d`

    tail -f -n 500 "${SITE_DIR}/${SUB}/application/logs/log-${TODAY}.php"
}

download() {
    SOURCE="${REPO_PATH}/${GROUP_PATH}/${ARTIFACT_ID}/${VERSION}/${FILENAME}"

    echo "--> from : ${SOURCE}"
    echo "--> to   : ${TEMP_DIR}/${FILENAME}"

    if [ -d "${FILEPATH}" ] || [ -f "${FILEPATH}" ]; then
        rm -rf "${FILEPATH}"
    fi

    if [ "${REPO_USER}" == "s3" ]; then
        aws s3 cp "${SOURCE}" "${TEMP_DIR}"
    else
        if [ "${REPO_USER}" == "" ] || [ "${REPO_PASS}" == "" ]; then
            wget -q -N -P "${TEMP_DIR}" "${SOURCE}"
        else
            wget -q --user "${REPO_USER}" --password "${REPO_PASS}" -N -P "${TEMP_DIR}" "${SOURCE}"
        fi
    fi

    if [ ! -f "${FILEPATH}" ]; then
        echo "deploy file does not exist. [${FILEPATH}]"
        exit 1
    fi

    # war (for tomcat stop/start)
    if [ "${TYPE}" == "war" ]; then
        HAS_TOMCAT="TRUE"
    fi

    # php unzip
    if [ "${TYPE}" == "php" ]; then
        if [ -d "${UNZIP_DIR}" ] || [ -f "${UNZIP_DIR}" ]; then
            rm -rf "${UNZIP_DIR}"
        fi

        if [ -d "${UNZIP_DIR}" ] || [ -f "${UNZIP_DIR}" ]; then
            echo "deploy file can not unzip. [${UNZIP_DIR}]"
            exit 1
        fi

        unzip -q "${FILEPATH}" -d "${UNZIP_DIR}"

        if [ -d "${UNZIP_DIR}/application/logs" ]; then
            chmod 777 "${UNZIP_DIR}/application/logs"
        fi
    fi
}

placement() {
  if [ "${DEPLOY_PATH}" == "" ]; then
      echo "empty deploy path. [${DEPLOY_PATH}]"
      exit 1
  fi

  echo "--> ${DEPLOY_PATH}"

  # php
  if [ "${TYPE}" == "php" ]; then
    rm -rf "${DEPLOY_PATH}.backup"

    if [ -d "${DEPLOY_PATH}" ] || [ -f "${DEPLOY_PATH}" ]; then
        mv -f "${DEPLOY_PATH}" "${DEPLOY_PATH}.backup"
    fi

    if [ -d "${DEPLOY_PATH}" ] || [ -f "${DEPLOY_PATH}" ]; then
      echo "deploy dir can not copy. [${DEPLOY_PATH}]"
      exit 1
    fi

    mv -f "${UNZIP_DIR}" "${DEPLOY_PATH}"
  fi

  # war
  if [ "${TYPE}" == "war" ]; then
    DEST_WAR="${DEPLOY_PATH}/${ARTIFACT_ID}.${PACKAGING}"

    rm -rf "${DEPLOY_PATH}/${ARTIFACT_ID}"
    rm -rf "${DEST_WAR}"

    if [ -d "${DEST_WAR}" ] || [ -f "${DEST_WAR}" ]; then
      echo "deploy file can not copy. [${DEST_WAR}]"
      exit 1
    fi

    cp -rf "${FILEPATH}" "${DEST_WAR}"
  fi

  # jar
  if [ "${TYPE}" == "jar" ]; then
    DEST_WAR="${DEPLOY_PATH}/${ARTIFACT_ID}.${PACKAGING}"

    process_stop

    rm -rf "${DEST_WAR}"

    if [ -d "${DEST_WAR}" ] || [ -f "${DEST_WAR}" ]; then
      echo "deploy file can not copy. [${DEST_WAR}]"
      exit 1
    fi

    cp -rf "${FILEPATH}" "${DEST_WAR}"

    process_start
  fi
}

tomcat_stop() {
    if [ "${HAS_TOMCAT}" == "TRUE" ]; then
        status=`ps -ef | grep catalina | grep java | grep -v grep | wc -l | awk '{print $1}'`
        if [ ${status} -ge 1 ]; then
            echo "tomcat stop..."
            ${TOMCAT_DIR}/bin/shutdown.sh
        fi
    fi
}

tomcat_start() {
    if [ "${HAS_TOMCAT}" == "TRUE" ]; then
        status=`ps -ef | grep catalina | grep java | grep -v grep | wc -l | awk '{print $1}'`
        count=0
        while [ ${status} -ge 1 ]; do
            echo "sleep..."
            sleep 3

            if [ ${count} -ge 5 ]; then
                pid=`ps -ef | grep catalina | grep java | grep -v grep | awk '{print $2}'`
                kill -9 ${pid}
                echo "tomcat (${pid}) was killed."
            fi

            sleep 2
            status=`ps -ef | grep catalina | grep java | grep -v grep | wc -l | awk '{print $1}'`
            count=`expr ${count} + 1`
        done

        echo "tomcat start..."
        ${TOMCAT_DIR}/bin/startup.sh
    fi
}

process_stop() {
    PID=`ps -ef | grep "[${ARTIFACT_ID:0:1}]""${ARTIFACT_ID:1}" | grep "[-]jar" | awk '{print $2}'`
    if [ "${PID}" != "" ]; then
        kill -9 ${PID}
        echo "killed (${PID})"
    fi
}

process_start() {
    java -jar ${DEPLOY_PATH}/${ARTIFACT_ID}.${PACKAGING} >> /dev/null &

    PID=`ps -ef | grep "[${ARTIFACT_ID:0:1}]""${ARTIFACT_ID:1}" | grep "[-]jar" | awk '{print $2}'`
    if [ "${PID}" != "" ]; then
        echo "startup (${PID})"
    fi
}

copy() {
    ${SUDO} cp -rf $1 $2

    if [ "$3" != "" ]; then
        ${SUDO} chmod $3 $2
    fi

    if [ "${USER}" != "" ]; then
        ${SUDO} chown ${USER}.${USER} $2
    fi
}

make_dir() {
    if [ ! -d $1 ] && [ ! -f $1 ]; then
        ${SUDO} mkdir $1
    fi

    if [ "$2" != "" ]; then
        ${SUDO} chmod $2 $1
    fi

    if [ "${USER}" != "" ]; then
        ${SUDO} chown ${USER}.${USER} $1
    fi
}

echo_toast() {
    echo_bar
    echo "                              _  _          _                  _        "
    echo "      _   _  __ _ _ __   ___ | |(_) __ _   | |_ ___   __ _ ___| |_      "
    echo "     | | | |/ _\` | '_ \ / _ \| || |/ _\`  | | __/ _ \ / _\` / __| __|  "
    echo "     | |_| | (_| | | | | (_) | || | (_| |  | || (_) | (_| \__ \ |_      "
    echo "      \__, |\__,_|_| |_|\___/|_|/ |\__,_|   \__\___/ \__,_|___/\__|     "
    echo "      |___/                   |__/                                      "
    echo "                                                         by nalbam      "
    echo_bar
}

echo_bar() {
    echo "================================================================================"
}

echo_() {
    echo ""
}

################################################################################

toast

# done
echo "done."

exit $?
