#!/usr/bin/env bash

TOKEN=""

DOMAIN="toast.yanolja.com"

LOGIN_URL="https://member.yanolja.com/ywt/loginToken"

REPO_PATH="http://toast.yanolja.com/uploads/com/yanolja"
REPO_USER="admin"
REPO_PASS="password"

PHASE="dev"
FLEET="fleet"
NAME="name"

HOST="127.0.0.1"
PORT="22"

USER="yanolja"

CONFIG="${HOME}/.toast"

if [ -f "${CONFIG}" ]; then
  . ${CONFIG}
fi

CMD=$1
SUB=$2

ARTIFACT_ID=$3
VERSION=$4
DEPLOY_TYPE=$5
DEPLOY_PATH=$6

HAS_WAR=FALSE

SUDO=""

if [ ! -d /usr/bin ]; then
  SUDO="sudo"
fi

############################################################

function usage() {
    echo "Usage: $0 {config|version|deploy}"
}

function login() {
    echo "Please input yanolja id."
    read YAJA_ID
    if [ "${YAJA_ID}" == "" ]; then
        exit 1
    fi

    echo "Please input yanolja password."
    read YAJA_PW
    if [ "${YAJA_PW}" == "" ]; then
        exit 1
    fi

    RES=`curl --data "id=${YAJA_ID}&passwd=${YAJA_PW}" ${LOGIN_URL}`
    ARR=(${RES})

    TOKEN="${ARR[0]}"
}

function config() {
    if [ "${TOKEN}" == "" ]; then
        login
    else
        echo "Do you want yanolja login? [yes/no] [default:no]"
        read LOGIN_YN
        if [ "${LOGIN_YN}" == "yes" ]; then
            login
        fi
    fi

    echo "Please input toast domain. [default:${DOMAIN}]"
    read READ_DOMAIN
    if [ "${READ_DOMAIN}" != "" ]; then
        DOMAIN=${READ_DOMAIN}
    fi

    echo "Please input server phase. [default:${PHASE}]"
    read READ_PHASE
    if [ "${READ_PHASE}" != "" ]; then
        PHASE=${READ_PHASE}
    fi

    echo "Please input server fleet. [default:${FLEET}]"
    read READ_FLEET
    if [ "${READ_FLEET}" != "" ]; then
        FLEET=${READ_FLEET}
    fi

    echo "Please input server name. [default:${NAME}]"
    read READ_NAME
    if [ "${READ_NAME}" != "" ]; then
        NAME=${READ_NAME}
    fi

    echo "Please input server host. [default:${HOST}]"
    read READ_HOST
    if [ "${READ_HOST}" != "" ]; then
        HOST=${READ_HOST}
    fi

    echo "Please input server port. [default:${PORT}]"
    read READ_PORT
    if [ "${READ_PORT}" != "" ]; then
        PORT=${READ_PORT}
    fi

    echo "Please input server user. [default:${USER}]"
    read READ_USER
    if [ "${READ_USER}" != "" ]; then
        USER=${READ_USER}
    fi

    TOAST_URL="http://${DOMAIN}"

    ID_RSA="${HOME}/.ssh/id_rsa.pub"

    if [ ! -f "${ID_RSA}" ]; then
        ssh-keygen -t rsa -C "${NAME}@${PHASE}.yanolja.com"
    fi

    SSH_KEY=`cat ${ID_RSA}`

    echo "# yanolja toast config" > ${CONFIG}
    echo "DOMAIN=${DOMAIN}" >> ${CONFIG}
    echo "TOAST_URL=${TOAST_URL}" >> ${CONFIG}
    echo "REPO_PATH=${REPO_PATH}" >> ${CONFIG}
    echo "REPO_USER=${REPO_USER}" >> ${CONFIG}
    echo "REPO_PASS=${REPO_PASS}" >> ${CONFIG}
    echo "PHASE=${PHASE}" >> ${CONFIG}
    echo "FLEET=${FLEET}" >> ${CONFIG}
    echo "NAME=${NAME}" >> ${CONFIG}
    echo "HOST=${HOST}" >> ${CONFIG}
    echo "PORT=${PORT}" >> ${CONFIG}
    echo "USER=${USER}" >> ${CONFIG}
    echo "TOKEN=${TOKEN}" >> ${CONFIG}

    #cat ${CONFIG}

    URL="${TOAST_URL}/server/config"

    RES=`curl --data "token=${TOKEN}&group=${PHASE}&fleet=${FLEET}&name=${NAME}&host=${HOST}&port=${PORT}&user=${USER}&key=${SSH_KEY}" ${URL}`
}

function init() {
    make_dir "/data"
    make_dir "/data/site"
    make_dir "/data/logs"
}

function make_dir() {
    if [ ! -d $1 ] && [ ! -f $1 ]; then
        ${SUDO} mkdir $1
        ${SUDO} chown ${USER}.${USER} $1
    fi
}

function version() {
    DEST_FILE="./pom.xml"
    TEMP_FILE="/tmp/out.tmp.$$"

    if [ ! -f "${DEST_FILE}" ]; then
        echo "Not exist file. [${DEST_FILE}]"
        exit 1
    fi

    ARR_GROUP=($(cat ${DEST_FILE} | grep -oP '(?<=groupId>)[^<]+'))
    ARR_ARTIFACT=($(cat ${DEST_FILE} | grep -oP '(?<=artifactId>)[^<]+'))
    ARR_VERSION=($(cat ${DEST_FILE} | grep -oP '(?<=version>)[^<]+'))

    echo "groupId=${ARR_GROUP[0]}"
    echo "artifactId=${ARR_ARTIFACT[0]}"
    echo "version=${ARR_VERSION[0]}"

    if [ "${ARR_GROUP[0]}" == "" ]; then
        echo "groupId does not exist. [${ARR_GROUP[0]}]"
        exit 1
    fi
    if [ "${ARR_ARTIFACT[0]}" == "" ]; then
        echo "artifactId does not exist. [${ARR_ARTIFACT[0]}]"
        exit 1
    fi

    THIS_VERSION=${ARR_VERSION[0]}

    #echo "THIS_VERSION : ${THIS_VERSION}"

    if [ "${SUB}" == "next" ]; then
        version_next
    fi

    version_save
}

function version_next() {
    URL="${TOAST_URL}/version/latest/${ARTIFACT_ID}"

    RES=`curl --data "token=${TOKEN}" ${URL}`
    ARR=(${RES})

    NEXT_VERSION="${ARR[0]}"

    echo "NEXT_VERSION : ${NEXT_VERSION}"

    VER1="<version>[\.0-9a-zA-Z]\+<\/version>"
    VER2="<version>${NEXT_VERSION}<\/version>"

    if [ -f ${DEST_FILE} -a -r ${DEST_FILE} ]; then
        sed "s/$VER1/$VER2/;10q;" "${DEST_FILE}" > ${TEMP_FILE}
        sed "1,10d" "${DEST_FILE}" >> ${TEMP_FILE}

        mv ${TEMP_FILE} "${DEST_FILE}"
    else
        echo "Error - Read Fail : ${DEST_FILE}"
        exit 1
    fi

    THIS_VERSION=NEXT_VERSION
}

function version_save() {
    #aws s3 sync ~/.m2/repository/com/yanolja/${ARTIFACT_ID}/ s3://repo.yanolja.com/release/com/yanolja/${ARTIFACT_ID}/

    URL="${TOAST_URL}/version/build/${ARTIFACT_ID}/${VERSION}"

    RES=`curl --data "token=${TOKEN}" ${URL}`
    ARR=(${RES})

    echo "${ARR[0]}"
}

function version_remove() {
    rm -rf ~/.m2/repository/com/yanolja/${ARTIFACT_ID}/${VERSION}

    #aws s3 rm s3://repo.yanolja.com/release/com/yanolja/${ARTIFACT_ID}/${VERSION} --recursive
}

function deploy() {
    TEMP_DIR="/tmp/deploy"

    if [ ! -d "${TEMP_DIR}" ]; then
        mkdir "${TEMP_DIR}"
    fi

    if [ "${SUB}" == "project" ]; then
        deploy_project
    fi
    if [ "${SUB}" == "server" ]; then
        deploy_server
    fi
}

function deploy_project() {
    # "deploy project yanolja.deploy 0.0.0 php /data/site/deploy"

    PACKAGING="${DEPLOY_TYPE}"
    if [ "${PACKAGING}" == "php" ]; then
        PACKAGING="war"
    fi

    FILENAME="${ARTIFACT_ID}-${VERSION}.${PACKAGING}"
    FILEPATH="${TEMP_DIR}/${FILENAME}"

    UNZIP_DIR="${TEMP_DIR}/${ARTIFACT_ID}"

    # download
    echo "download..."

    download

    tomcat_stop

    # placement
    echo "placement..."

    placement

    tomcat_start
}

function deploy_server() {
    # "deploy server"

    URL="${TOAST_URL}/target/server/${GROUP}/${NAME}"

    wget -q -N -P "${TEMP_DIR}" "${URL}"

    TARGET_FILE="${TEMP_DIR}/${NAME}"

    # download
    echo "download..."

    while read line
    do
      TARGET=(${line})

      deploy_value

      download
    done < ${TARGET_FILE}

    tomcat_stop

    # placement
    echo "placement..."

    while read line
    do
      TARGET=(${line})

      deploy_value

      placement
    done < ${TARGET_FILE}

    tomcat_start
}

function deploy_value() {
    ARTIFACT_ID="${TARGET[0]}"
    VERSION="${TARGET[1]}"
    DEPLOY_TYPE="${TARGET[2]}"
    DEPLOY_PATH="${TARGET[3]}"
    RANDOM="${TARGET[4]}"

    PACKAGING="${DEPLOY_TYPE}"
    if [ "${PACKAGING}" == "php" ]; then
        PACKAGING="war"
    fi
    if [ "${PACKAGING}" == "bin" ]; then
        PACKAGING="zip"
    fi

    FILENAME="${ARTIFACT_ID}-${VERSION}.${PACKAGING}"
    FILEPATH="${TEMP_DIR}/${FILENAME}"

    UNZIP_DIR="${TEMP_DIR}/${RANDOM}"
}

function download() {
    SOURCE="${REPO_PATH}/${ARTIFACT_ID}/${VERSION}/${FILENAME}"

    echo "--> from : ${SOURCE}"
    echo "--> to   : ${TEMP_DIR}/${FILENAME}"

    if [ -d "${FILEPATH}" ] || [ -f "${FILEPATH}" ]; then
        rm -rf "${FILEPATH}"
    fi

    wget -q --user ${REPO_USER} --password ${REPO_PASS} -N -P "${TEMP_DIR}" "${SOURCE}"

    if [ ! -f "${FILEPATH}" ]; then
        echo "deploy file does not exist. [${FILEPATH}]"
        exit 1
    fi

    # war (for tomcat stop/start)
    if [ "${DEPLOY_TYPE}" == "war" ]; then
        HAS_WAR="TRUE"
    fi
    # php unzip
    if [ "${DEPLOY_TYPE}" == "php" ]; then
        if [ -d "${UNZIP_DIR}" ] || [ -f "${UNZIP_DIR}" ]; then
            rm -rf "${UNZIP_DIR}"
        fi

        if [ -d "${UNZIP_DIR}" ] || [ -f "${UNZIP_DIR}" ]; then
            echo "deploy file can not unzip. [${UNZIP_DIR}]"
            exit 1
        fi

        unzip -q "${FILEPATH}" -d "${UNZIP_DIR}"
    fi
}

function placement() {
  if [ "${DEPLOY_PATH}" == "" ]; then
      echo "empty deploy path. [${DEPLOY_PATH}]"
      exit 1
  fi

  # war
  if [ "${DEPLOY_TYPE}" == "war" ]; then
    DEST_WAR="${DEPLOY_PATH}/${ARTIFACT_ID}.${PACKAGING}"

    rm -rf "${DEPLOY_PATH}/${ARTIFACT_ID}"
    rm -rf "${DEST_WAR}"

    if [ -d "${DEST_WAR}" ] || [ -f "${DEST_WAR}" ]; then
      echo "deploy file can not copy. [${DEST_WAR}]"
      exit 1
    fi

    cp -rf "${FILEPATH}" "${DEST_WAR}"
  fi
  # jar
  if [ "${DEPLOY_TYPE}" == "jar" ]; then
    DEST_WAR="${DEPLOY_PATH}/${ARTIFACT_ID}.${PACKAGING}"

    process_stop

    rm -rf "${DEST_WAR}"

    if [ -d "${DEST_WAR}" ] || [ -f "${DEST_WAR}" ]; then
      echo "deploy file can not copy. [${DEST_WAR}]"
      exit 1
    fi

    cp -rf "${FILEPATH}" "${DEST_WAR}"

    process_start
  fi
  # php
  if [ "${DEPLOY_TYPE}" == "php" ]; then
    echo "--> ${DEPLOY_PATH}"

    rm -rf "${DEPLOY_PATH}.backup"

    if [ -d "${DEPLOY_PATH}" ] || [ -f "${DEPLOY_PATH}" ]; then
        mv "${DEPLOY_PATH}" "${DEPLOY_PATH}.backup"
    fi

    if [ -d "${DEPLOY_PATH}" ] || [ -f "${DEPLOY_PATH}" ]; then
      echo "deploy dir can not copy. [${DEPLOY_PATH}]"
      exit 1
    fi

    mv "${UNZIP_DIR}" "${DEPLOY_PATH}"
  fi
}

function process_stop() {
    PID=`ps -ef | grep [${ARTIFACT_ID:0:1}]${ARTIFACT_ID:1} | awk '{print $2}'`
    if [ "${PID}" != "" ]; then
      kill -9 ${PID}
      echo "killed ${PID}"
    fi
}

function process_start() {
    java -jar ${DEPLOY_PATH}/${ARTIFACT_ID}.${PACKAGING} >> /dev/null &

    PID=`ps -ef | grep [${ARTIFACT_ID:0:1}]${ARTIFACT_ID:1} | awk '{print $2}'`
    if [ "${PID}" != "" ]; then
      echo "start up ${PID}"
    fi
}

function tomcat_stop() {
    if [ "${HAS_WAR}" == "TRUE" ]; then
      echo "tomcat stop..."
      /usr/local/tomcat8/bin/shutdown.sh
    fi
}

function tomcat_start() {
    if [ "${HAS_WAR}" == "TRUE" ]; then
      status=`ps -ef | grep catalina | grep java | grep -v grep | wc -l | awk '{print $1}'`
      count=0
      while [ ${status} -ge 1 ]; do
        echo "sleep..."
        sleep 3

        if [ ${count} -ge 5 ]; then
          pid=`ps -ef | grep catalina | grep java | grep -v grep | awk '{print $2}'`
          kill -9 ${pid}
          echo "tomcat (${pid}) was killed."
        fi

        sleep 2
        status=`ps -ef | grep catalina | grep java | grep -v grep | wc -l | awk '{print $1}'`
        count=`expr ${count} + 1`
      done
      echo "tomcat start..."
      /usr/local/tomcat8/bin/startup.sh
    fi
}

############################################################

case "${CMD}" in
    config)
        config
        ;;
    init)
        init
        ;;
    version)
        version
        ;;
    deploy)
        deploy
        ;;
    *)
        usage
        exit 1
esac

# done
echo "done."

exit $?
